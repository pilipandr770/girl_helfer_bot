# services/candidate_filter.py
import openai
import os
from dotenv import load_dotenv
from services.database import session, CandidateProfile

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")

ASSISTANT_ID = os.getenv("ASSISTANT_ID1")

if not ASSISTANT_ID:
    raise ValueError("ASSISTANT_ID1 –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

def analyze_message_and_update_candidate(user_id, candidate_id, message):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç
    candidate = session.query(CandidateProfile).filter_by(id=candidate_id).first()

    if not candidate:
        return f"–û—à–∏–±–∫–∞: –ö–∞–Ω–¥–∏–¥–∞—Ç —Å ID {candidate_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."

    try:
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": (
                    f"Assistant ID: {ASSISTANT_ID1}.\n"
                    "Analyze the candidate's message and determine which life spheres are relevant:\n"
                    "- Communication (‚≠ê)\n"
                    "- Emotional Intelligence (‚ù§Ô∏è)\n"
                    "- Logic (üí°)\n"
                    "- Shared Interests (üîó)\n"
                    "- Creativity (üé®)\n"
                    "- Responsibility (üõ°)\n"
                    "- Career (üíº)\n"
                    "- Support and Agreement (ü§ù)\n"
                    "- Overall Harmony (üåÄ).\n"
                    "Provide changes in the format: logic:+1, emotional:-1, etc."
                )},
                {"role": "user", "content": message}
            ],
            max_tokens=150
        )

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç OpenAI
        analysis = response["choices"][0]["message"]["content"].lower()

        # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞: "logic:+1, emotional:-1"
        changes = {item.split(":")[0].strip(): int(item.split(":")[1].strip())
                   for item in analysis.split(",")}

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        for sphere, change in changes.items():
            if hasattr(candidate, sphere + "_score"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—Ç—Ä–∏–±—É—Ç
                setattr(candidate, sphere + "_score", getattr(candidate, sphere + "_score") + change)

        session.commit()
        return f"–ö–∞–Ω–¥–∏–¥–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {changes}"

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"

def generate_candidate_report(candidate_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""
    candidate = session.query(CandidateProfile).filter_by(id=candidate_id).first()
    if not candidate:
        return f"–ö–∞–Ω–¥–∏–¥–∞—Ç —Å ID {candidate_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."

    missing_fields = []
    if not candidate.name:
        missing_fields.append("–∏–º—è")
    if not candidate.age:
        missing_fields.append("–≤–æ–∑—Ä–∞—Å—Ç")
    if not candidate.city:
        missing_fields.append("–≥–æ—Ä–æ–¥")
    if not candidate.interests:
        missing_fields.append("–∏–Ω—Ç–µ—Ä–µ—Å—ã")
    if not candidate.goals:
        missing_fields.append("—Ü–µ–ª–∏")

    report = {
        "known": {
            "name": candidate.name,
            "age": candidate.age,
            "city": candidate.city,
            "interests": candidate.interests,
            "goals": candidate.goals,
        },
        "missing": missing_fields
    }
    return report

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def filter_example():
    user_id = 12345
    candidate_id = 1
    message = "–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞–ø–∏—Å–∞–ª, —á—Ç–æ –æ–Ω —É–≤–ª–µ–∫–∞–µ—Ç—Å—è —Å–ø–æ—Ä—Ç–æ–º –∏ –ª—é–±–∏—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏."
    result = analyze_message_and_update_candidate(user_id, candidate_id, message)
    print(result)

if __name__ == "__main__":
    filter_example()
